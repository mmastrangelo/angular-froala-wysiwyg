import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * ScriptLoaderService inserts a script tag into the document containing a script from the specified source.
 */
export class ScriptLoaderService {
    constructor(http) {
        this.http = http;
        this.scripts = {};
    }
    load(id, src) {
        if (this.scripts[id]) {
            return of(({ script: id, loaded: true, status: 'Already Loaded' }));
        }
        let script = this.initializeScript(id);
        script.src = src;
        return this.loadAndAppendScript(id, script);
    }
    loadWithAuth(id, src) {
        if (this.scripts[id]) {
            return of(({ script: id, loaded: true, status: 'Already Loaded' }));
        }
        let script = this.initializeScript(id);
        return this.getText(src, new HttpHeaders(), new HttpParams()).pipe(switchMap(text => {
            script.innerText = text;
            return this.loadAndAppendScript(id, script);
        }));
    }
    unloadScript(id) {
        var _a;
        (_a = document.getElementById("script_" + id)) === null || _a === void 0 ? void 0 : _a.remove();
        delete this.scripts[id];
    }
    initializeScript(id) {
        let script = document.getElementById("script_" + id); // Don't proliferate script tags on revisits
        if (!script) {
            script = document.createElement('script');
        }
        script.id = "script_" + id;
        script.type = 'text/javascript';
        return script;
    }
    loadAndAppendScript(id, script) {
        return new Observable(subscriber => {
            if (script.src) { // If the script has a URL src, complete the observable when it is loaded; otherwise, assume the source is included as bodycontent and complete immediately
                if (script.readyState) { // IE
                    script.onreadystatechange = () => {
                        if (script.readyState === "loaded" || script.readyState === "complete") {
                            script.onreadystatechange = null;
                            this.scripts[id] = true;
                            subscriber.next({ script: id, loaded: true, status: 'Loaded' });
                            subscriber.complete();
                        }
                    };
                }
                else { // Others
                    script.onload = () => {
                        this.scripts[id] = true;
                        subscriber.next({ script: id, loaded: true, status: 'Loaded' });
                        subscriber.complete();
                    };
                }
                script.onerror = err => subscriber.error({ script: id, loaded: false, status: 'Loaded', error: err });
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            else {
                this.scripts[id] = true;
                subscriber.next({ script: id, loaded: true, status: 'Loaded' });
                subscriber.complete();
            }
        });
    }
    getText(url, headers, params) {
        return this.http.get(url, {
            headers: headers,
            observe: 'body',
            responseType: 'text',
            params: params,
        });
    }
}
/** @nocollapse */ ScriptLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScriptLoaderService_Factory() { return new ScriptLoaderService(i0.ɵɵinject(i1.HttpClient)); }, token: ScriptLoaderService, providedIn: "root" });
ScriptLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ScriptLoaderService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,