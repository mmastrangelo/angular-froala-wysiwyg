{"version":3,"sources":["../../projects/library/src/loader/script-loader.service.ts","../../projects/library/src/editor/editor.directive.ts","../../projects/library/src/editor/editor.module.ts","../../projects/library/src/view/view.directive.ts","../../projects/library/src/view/view.module.ts","../../projects/library/src/fe-root.module.ts"],"names":["ScriptLoaderService","http","this","scripts","prototype","load","id","src","of","script","loaded","status","initializeScript","loadAndAppendScript","loadWithAuth","_this","getText","HttpHeaders","HttpParams","pipe","switchMap","text","innerText","unloadScript","_a","document","getElementById","remove","createElement","type","Observable","subscriber","readyState","onreadystatechange","next","complete","onload","onerror","err","error","getElementsByTagName","appendChild","url","headers","params","get","observe","responseType","Injectable","args","providedIn","HttpClient","FroalaEditorDirective","el","zone","scriptLoader","_opts","immediateAngularModelUpdate","angularIgnoreAttrs","SPECIAL_TAGS","INNER_HTML_ATTR","_hasSpecialTag","_editorInitialized","_oldModel","onChange","_","onTouched","froalaModelChange","EventEmitter","froalaInit","element","nativeElement","indexOf","tagName","toLowerCase","_element","writeValue","content","updateEditor","registerOnChange","fn","registerOnTouched","Object","defineProperty","opts","clone","assign","item","result","me","Number","String","Boolean","forEach","toString","call","child","index","array","nodeType","cloneNode","Date","i","JSON","stringify","_model","setContent","_editor","html","set","innerHTML","updateModel","run","modelContent","attributeNodes","attributes","attrs","length","attrName","name","value","returnedHtml","emit","registerEvent","eventName","callback","events","initListeners","self","on","setTimeout","createEditor","froalaJsPath","toPromise","then","runOutsideAngular","initialized","existingInitCallback","overridden","FroalaEditor","setHtml","undo","reset","saveStep","firstTime","tags","attr","hasOwnProperty","setAttribute","destroyEditor","destroy","getEditor","generateManualController","controls","initialize","bind","ngAfterViewInit","observers","ngOnDestroy","setDisabledState","isDisabled","Directive","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","FroalaEditorModule","forRoot","ngModule","NgModule","declarations","exports","FroalaViewDirective","renderer","addClass","Renderer2","FroalaViewModule","imports"],"mappings":"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","sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\ndeclare let document: Document;\n\nexport type ScriptLoaderResponse = { script: string, loaded: boolean, status: string, error?: string | Event };\n\n/**\n * ScriptLoaderService inserts a script tag into the document containing a script from the specified source.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ScriptLoaderService {\n\n    constructor(private http: HttpClient) {}\n\n    private scripts: { [id: string]: boolean } = {};\n\n    public load(id: string, src: string): Observable<ScriptLoaderResponse> {\n\n        if (this.scripts[id]) {\n            return of(({ script: id, loaded: true, status: 'Already Loaded' }));\n        }\n\n        let script = this.initializeScript(id);\n        script.src = src;\n\n        return this.loadAndAppendScript(id, script);\n    }\n\n    public loadWithAuth(id: string, src: string): Observable<ScriptLoaderResponse> {\n\n        if (this.scripts[id]) {\n            return of(({ script: id, loaded: true, status: 'Already Loaded' }));\n        }\n\n        let script = this.initializeScript(id);\n\n        return this.getText(src, new HttpHeaders(), new HttpParams()).pipe(\n            switchMap(text => {\n                script.innerText = text;\n                return this.loadAndAppendScript(id, script);\n            })            \n        );\n    }\n\n    public unloadScript(id: string) {\n\n        document.getElementById(\"script_\" + id)?.remove();\n        delete this.scripts[id];\n    }\n\n    private initializeScript(id: string): HTMLScriptElement {\n\n        let script = <HTMLScriptElement>document.getElementById(\"script_\" + id); // Don't proliferate script tags on revisits\n        if (!script) {\n            script = document.createElement('script');\n        }\n\n        script.id = \"script_\" + id;\n        script.type = 'text/javascript';\n\n        return script;\n    }\n\n    private loadAndAppendScript(id: string, script: HTMLScriptElement): Observable<ScriptLoaderResponse> {\n\n        return new Observable<ScriptLoaderResponse>(subscriber => {\n\n            if (script.src) { // If the script has a URL src, complete the observable when it is loaded; otherwise, assume the source is included as bodycontent and complete immediately\n                if ((<any>script).readyState) {  // IE\n                    (<any>script).onreadystatechange = () => {\n                        if ((<any>script).readyState === \"loaded\" || (<any>script).readyState === \"complete\") {\n                            (<any>script).onreadystatechange = null;\n                            this.scripts[id] = true;\n                            subscriber.next({ script: id, loaded: true, status: 'Loaded' });\n                            subscriber.complete();\n                        }\n                    };\n                } else {  // Others\n                    script.onload = () => {\n                        this.scripts[id] = true;\n                        subscriber.next({ script: id, loaded: true, status: 'Loaded' });\n                        subscriber.complete();\n                    };\n                }\n\n                script.onerror = err => subscriber.error({ script: id, loaded: false, status: 'Loaded', error: err });\n                document.getElementsByTagName('head')[0].appendChild(script);\n            } else {\n                this.scripts[id] = true;\n                subscriber.next({ script: id, loaded: true, status: 'Loaded' });\n                subscriber.complete();\n            }\n        });\n    }\n\n    public getText(url: string, headers: HttpHeaders, params: HttpParams): Observable<string> {\n\n        return this.http.get(url, {\n                headers: headers,\n                observe: 'body',\n                responseType: 'text',\n                params: params,\n            });\n    }\n\n\n}","import { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output } from '@angular/core';\nimport { ScriptLoaderService } from \"../loader/script-loader.service\";\n\n// import FroalaEditor from 'froala-editor';\n\ndeclare let FroalaEditor;\n\n@Directive({\n  selector: '[froalaEditor]',\n  exportAs: 'froalaEditor',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FroalaEditorDirective),\n      multi: true\n    }\n  ]\n})\nexport class FroalaEditorDirective implements ControlValueAccessor {\n\n  // editor options\n  private _opts: any = {\n    immediateAngularModelUpdate: false,\n    angularIgnoreAttrs: null\n  };\n\n  private _element: any;\n\n  private SPECIAL_TAGS: string[] = ['img', 'button', 'input', 'a'];\n  private INNER_HTML_ATTR: string = 'innerHTML';\n  private _hasSpecialTag: boolean = false;\n\n  // editor element\n  private _editor: any;\n\n  // initial editor content\n  private _model: string;\n\n  private _editorInitialized: boolean = false;\n\n  private _oldModel: string = null;\n\n  constructor(el: ElementRef, private zone: NgZone, private scriptLoader: ScriptLoaderService) {\n\n    let element: any = el.nativeElement;\n\n    // check if the element is a special tag\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n      this._hasSpecialTag = true;\n    }\n    this._element = element;\n\n    this.zone = zone;\n  }\n\n  // Begin ControlValueAccesor methods.\n  onChange = (_) => {\n  };\n  onTouched = () => {\n  };\n\n  // Form model content changed.\n  writeValue(content: any): void {\n    this.updateEditor(content);\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  // End ControlValueAccesor methods.\n\n  // froalaEditor directive as input: store the editor options\n  @Input() set froalaEditor(opts: any) {\n    this._opts = this.clone(  opts || this._opts);\n    this._opts =  {...this._opts};\n  }\n\n   // TODO: replace clone method with better possible alternate \n  private clone(item) {\n  \tconst me = this;  \n      if (!item) { return item; } // null, undefined values check\n\n      let types = [ Number, String, Boolean ], \n          result;\n\n      // normalizing primitives if someone did new String('aaa'), or new Number('444');\n      types.forEach(function(type) {\n          if (item instanceof type) {\n              result = type( item );\n          }\n      });\n\n      if (typeof result == \"undefined\") {\n          if (Object.prototype.toString.call( item ) === \"[object Array]\") {\n              result = [];\n              item.forEach(function(child, index, array) { \n                  result[index] = me.clone( child );\n              });\n          } else if (typeof item == \"object\") {\n              // testing that this is DOM\n              if (item.nodeType && typeof item.cloneNode == \"function\") {\n                  result = item.cloneNode( true );    \n              } else if (!item.prototype) { // check that this is a literal\n                  if (item instanceof Date) {\n                      result = new Date(item);\n                  } else {\n                      // it is an object literal\n                      result = {};\n                      for (var i in item) {\n                          result[i] = me.clone( item[i] );\n                      }\n                  }\n              } else {\n                  if (false && item.constructor) {\n                      result = new item.constructor();\n                  } else {\n                      result = item;\n                  }\n              }\n          } else {\n              result = item;\n          }\n      }\n      return result;\n  }\n  // froalaModel directive as input: store initial editor content\n  @Input() set froalaModel(content: any) {\n    this.updateEditor(content);\n  }\n\n  // Update editor with model contents.\n  private updateEditor(content: any) {\n    if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n      return;\n    }\n\n    if (!this._hasSpecialTag) {\n      this._oldModel = content;\n    } else {\n      this._model = content;\n    }\n\n    if (this._editorInitialized) {\n      if (!this._hasSpecialTag) {\n        this._editor.html.set(content);\n      } else {\n        this.setContent();\n      }\n    } else {\n      if (!this._hasSpecialTag) {\n        this._element.innerHTML = content || '';\n      } else {\n        this.setContent();\n      }\n    }\n  }\n\n  // froalaModel directive as output: update model if editor contentChanged\n  @Output() froalaModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n  // froalaInit directive as output: send manual editor initialization\n  @Output() froalaInit: EventEmitter<Object> = new EventEmitter<Object>();\n\n  // update model if editor contentChanged\n  private updateModel() {\n    this.zone.run(() => {\n\n      let modelContent: any = null;\n\n      if (this._hasSpecialTag) {\n\n        let attributeNodes = this._element.attributes;\n        let attrs = {};\n\n        for (let i = 0; i < attributeNodes.length; i++) {\n\n          let attrName = attributeNodes[i].name;\n          if (this._opts.angularIgnoreAttrs && this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\n            continue;\n          }\n\n          attrs[attrName] = attributeNodes[i].value;\n        }\n\n        if (this._element.innerHTML) {\n          attrs[this.INNER_HTML_ATTR] = this._element.innerHTML;\n        }\n\n        modelContent = attrs;\n      } else {\n\n        let returnedHtml: any = this._editor.html.get();\n        if (typeof returnedHtml === 'string') {\n          modelContent = returnedHtml;\n        }\n      }\n      if (this._oldModel !== modelContent) {\n        this._oldModel = modelContent;\n\n        // Update froalaModel.\n        this.froalaModelChange.emit(modelContent);\n\n        // Update form model.\n        this.onChange(modelContent);\n      }\n\n    })\n  }\n\n  private registerEvent(eventName, callback) {\n    if (!eventName || !callback) {\n      return;\n    }\n\n    if (!this._opts.events) {\n      this._opts.events = {};\n    }\n\n    this._opts.events[eventName] = callback;\n  }\n\n  private initListeners() {\n    let self = this;\n    // Check if we have events on the editor.\n    if (this._editor.events) {\n      // bind contentChange and keyup event to froalaModel\n      this._editor.events.on('contentChanged', function () {\n        self.updateModel();\n      });\n      this._editor.events.on('mousedown', function () {\n        setTimeout(function () {\n          self.onTouched();\n        }, 0);\n      });\n\n      if (this._opts.immediateAngularModelUpdate) {\n        this._editor.events.on('keyup', function () {\n          setTimeout(function () {\n            self.updateModel();\n          }, 0);\n        });\n      }\n    }\n\n    this._editorInitialized = true;\n  }\n\n  private createEditor() {\n    if (this._editorInitialized) {\n      return;\n    }\n\n    this.scriptLoader.load(\"Froala\", this._opts.froalaJsPath)\n      .toPromise()\n      .then(() => {\n        this.setContent(true);\n\n        // init editor\n        this.zone.runOutsideAngular(() => {\n          // Add listeners on initialized event.\n          if (!this._opts.events) this._opts.events = {};\n    \n          // Register initialized event.\n          this.registerEvent('initialized', this._opts.events && this._opts.events.initialized);\n          const existingInitCallback = this._opts.events.initialized;\n          // Default initialized event.\n          if (!this._opts.events.initialized || !this._opts.events.initialized.overridden) {\n            this._opts.events.initialized = () => {\n              this.initListeners();\n              existingInitCallback && existingInitCallback.call(this._editor, this);\n            };\n            this._opts.events.initialized.overridden = true;\n          }\n    \n          // Initialize the Froala Editor.\n          this._editor = new FroalaEditor(\n            this._element,\n            this._opts\n          );\n        });\n      });\n  }\n\n  private setHtml() {\n    this._editor.html.set(this._model || \"\");\n\n    // This will reset the undo stack everytime the model changes externally. Can we fix this?\n    this._editor.undo.reset();\n    this._editor.undo.saveStep();\n  }\n\n  private setContent(firstTime = false) {\n    let self = this;\n\n    // Set initial content\n    if (this._model || this._model == '') {\n      this._oldModel = this._model;\n      if (this._hasSpecialTag) {\n\n        let tags: Object = this._model;\n\n        // add tags on element\n        if (tags) {\n\n          for (let attr in tags) {\n            if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n              this._element.setAttribute(attr, tags[attr]);\n            }\n          }\n\n          if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n            this._element.innerHTML = tags[this.INNER_HTML_ATTR];\n          }\n        }\n      } else {\n        if (firstTime) {\n          this.registerEvent('initialized', function () {\n            self.setHtml();\n          });\n        } else {\n          self.setHtml();\n        }\n      }\n    }\n  }\n\n  private destroyEditor() {\n    if (this._editorInitialized) {\n      this._editor.destroy();\n      this._editorInitialized = false;\n    }\n  }\n\n  private getEditor() {\n    if (this._element) {\n      return this._editor;\n    }\n\n    return null;\n  }\n\n  // send manual editor initialization\n  private generateManualController() {\n    let controls = {\n      initialize: this.createEditor.bind(this),\n      destroy: this.destroyEditor.bind(this),\n      getEditor: this.getEditor.bind(this),\n    };\n    this.froalaInit.emit(controls);\n  }\n\n  // TODO not sure if ngOnInit is executed after @inputs\n  ngAfterViewInit() {\n    // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n    if (!this.froalaInit.observers.length) {\n      this.createEditor();\n    } else {\n      this.generateManualController();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyEditor();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { FroalaEditorDirective } from './editor.directive';\n\n@NgModule({\n  declarations: [FroalaEditorDirective],\n  exports: [FroalaEditorDirective]\n})\n\nexport class FroalaEditorModule {\n  public static forRoot(): ModuleWithProviders<FroalaEditorModule> {\n    return {ngModule: FroalaEditorModule, providers: []};\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\n\n@Directive({\n  selector: '[froalaView]'\n})\nexport class FroalaViewDirective {\n\n  private _element: HTMLElement;\n\n  constructor(private renderer: Renderer2, element: ElementRef) {\n    this._element = element.nativeElement;\n  }\n\n  // update content model as it comes\n  @Input() set froalaView(content: string) {\n    this._element.innerHTML = content;\n  }\n\n  ngAfterViewInit() {\n    this.renderer.addClass(this._element, \"fr-view\");\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { FroalaViewDirective } from './view.directive';\n\n@NgModule({\n  declarations: [FroalaViewDirective],\n  exports: [FroalaViewDirective]\n})\nexport class FroalaViewModule {\n  public static forRoot(): ModuleWithProviders<FroalaViewModule> {\n    return {ngModule: FroalaViewModule, providers: []};\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FroalaEditorModule } from './editor/editor.module';\nimport { FroalaViewModule } from './view/view.module';\n\n@NgModule({\n  imports: [\n    FroalaEditorModule.forRoot(),\n    FroalaViewModule.forRoot()\n  ],\n  exports: [\n    FroalaEditorModule,\n    FroalaViewModule\n  ]\n})\nexport class FERootModule {\n\n}\n"]}